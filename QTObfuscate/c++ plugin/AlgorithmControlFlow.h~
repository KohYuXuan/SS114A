#ifndef ALGORITHM_CONTROL_FLOW
#define ALGORITHM_CONTROL_FLOW

#include <iostream>
#include <vector>
#include <string>
#include <utility>

#include <algorithm>
#include <time.h>
#include <cstdlib>
#include <sstream>
#include <ctype.h>

using namespace std;

char rand_alnum();

#define NUM_OF_RANDOM_CHAR 6
#define RANDOM_NUM (rand() % 100000 + 1000)


class AlgorithmControlFlow
{

private:

vector<pair<string,string> > m_levels;
vector<pair<int,int> > m_breaks;
vector<pair<int,int> > m_continues;
string s_output;
string m_saveToBuffer;

public:

	AlgorithmControlFlow(){srand ( time(NULL) );}

void getOutputBuffer(string& s_output);
void writeToBuffer(const string& s_input);

std::string rand_alnum_str (std::string::size_type sz);
string intToString(int i_input);

void control_flow_flattening(string& s_input);
void flatten_block(string& s_block);
void transform_block(string &s_input, int &i_entry, int i_exit);
void transform_if(string &s_input, int i_entry, int i_exit, int i_numElseIf, bool b_elseExist);
void transform_while(string &s_input, int i_entry, int i_exit);
void transform_switch(string &s_input, int i_entry, int i_exit);
void transform_do(string &s_input, int i_entry, int i_exit);
void transform_for(string &s_input, int i_entry, int i_exit);
void transform_try(string &s_input, int i_entry, int i_exit);
void transform_sequence(string &s_input, int i_entry, int i_exit);

void findFunction(const string& s_input, int& i_startPosition, int &i_endPosition);
bool moveVariable(string& s_input, string& s_type, string& s_output);
void stringToReplace(string& s_input, string& s_output, string s_toReplace, string& s_replaceWith);
void searchEndBracket(const string& s_input, int i_startPosition, int &i_endPosition);
void searchEndBraces(const string& s_input, int i_startPosition, int &i_endPosition);
void searchEndPosition(const string& s_input, int i_startPosition, int &i_endPosition);
void searchEndOfElseIf(const string& s_input, int i_startPosition, int& i_endPosition, int& i_numElseIf, bool& b_elseExist);

};




/*
int main()
{


	string str = " aaaa  aaa  int *bbb  ccc   int  d";
	//control_flow_flattening(str);
	//cout << "\n\n" << str << endl;

	int i=0;
	//string str2 = "               i_firstQuote\ni_secondQuote\nwhile(i_firstQuote != string::npos && i_secondQuote != string::npos) {\t\ni_sizeOfQuotedString break; = i_secondQuote - i_firstQuote - 1;\n}\naaaaaa\nreturn 0;";

	// test while
	//string str2 = "i = 1;\ns = 0;\nwhile (i <= str.size())\ncout<<i<<endl;";

// test if
//string str2 = "while(qwe){123;}\ni = 1;\ns = 0;\nif (i <= str.size()){\ncout<<i<<\" \";\nif(0000){oooo;}\nelse if(5678){ppp;}\ns += i;\ni++;\n}else if(aa)	{if(bb)jj;\nelse if(1234){abcd;}}\nelse {return;\n}\nlllll;if(zz)f;\nelse return;\n";

	// test switch
	//string str2 = "i = 1;\ns = 0;\nswitch (2)\n{\ncase 1:aaa;break;kkk;break;lll;\n case 2:bbb;\ndefault:\n}";

	// test do
	//string str2 = "do{\ncout<<i<<\" \";s += i;\ni++;\n}while (i <= str.size());";

	// test for
	//string str2 = "for (int i=0; i<str.size(); ++i) aaaa;";


	// test try
	//string str2 = "try{lll;}catch(...){kk;}\ncatch(...){ppp;}";



	// test variable
	string str2 = "void aa(){abcedfg;\nefghij;}\n int bb(char abc){int* n=0;}";

	control_flow_flattening(str2);
	//transform_block(str2, i,0);
}

//i = 1;\ns = 0;\nwhile (i <= 100) {\ns += i;\ni++;\n}


*/

#endif
